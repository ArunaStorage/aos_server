[proxy]
# ID of the proxy
endpoint_id = "01H81W0ZMB54YEP5711Q2BK46V"
# Private ed25519 key of the proxy (can also be provided via env-var PROXY_PRIVATE_KEY)
private_key = "MC4CAQAwBQYDK2VwBCIEIM/FI+bYw+auSKGyGqeISRIEjofvZV/lbK7QL1wkuCey"
public_key = "MCowBQYDK2VwAyEAnouQBh4GHPCD/k85VIzPyCdOijVg2qlzt2TELwTMy4c="
# The serial number of the proxy (will be received from the server on registration)
serial = 1337
# Optional will disable notification sync if not set
aruna_url = "http://localhost:50051"
enable_ingest = true # Set to true to enable the ingest service
admin_ids = [
    "01H819G3ZMK5DC9Q5PD18N9SXB",
] # Admins can access the ingest service
grpc_server = "0.0.0.0:50052"
remote_synced = true
replication_interval = 30 # Interval between replication batches in seconds

[persistence.postgres]
host = "localhost"
port = 5433
user = "yugabyte"
database = "proxy"
# Can also be provided via env-var POSTGRES_PASSWORD
password = "yugabyte"
schema = './src/database/schema.sql'

[frontend]
hostname = "localhost:1337"
cors_exception = "http://localhost:3000"

[backend.s3]
# s3 host
host = "http://localhost:9000"
# (UNSUPPORTED) currently only env AWS_ACCESS_KEY_ID
# access_key="minioadmin"
# (UNSUPPORTED) currently only env AWS_SECRET_ACCESS
# secret_key="minioadmin"
encryption = true
compression = true
deduplication = true     # COMING SOON If deduplication is enabled, the backend will check if an object with the same hash already exists and return the existing object if it does
tmp = "tmp12345"         # Will generate a random temp bucket_name if not set
force_path_style = false # Set, if s3 backend is not supporting subdomains
# dropbox_bucket="" # Set value to set a dropbox bucket
# A scheme for the backend to use when deciding where to store objects
# The following variables are available:
# - {{PROJECT_NAME}} - The project name (lowercase)
# - {{PROJECT_ID}} - The project ULID (lowercase)
# - {{COLLECTION_NAME}} - The collection name (if present)
# - {{COLLECTION_ID}} - The collection ULID (if present)
# - {{DATASET_NAME}} - The dataset name (if present)
# - {{DATASET_ID}} - The dataset ULID (if present)
# - {{OBJECT_NAME}} - The object name
# - {{OBJECT_ID}} - The object ULID
# - {{RANDOM:x}} - A random string of (x == integer) lower_case ascii characters
# - {{PROXY_ID}} - The proxy ULID (lowercase)
backend_scheme = "s3://{{PROXY_ID}}-{{PROJECT_ID}}/{{PROJECT_NAME}}/{{COLLECTION_NAME}}/{{DATASET_NAME}}/{{RANDOM:10}}/{{OBJECT_NAME}}"

#[[rules]]
#target="OBJECT" # ROOT, OBJECT, OBJECTPACKAGE, BUNDLE, REPLICATIONIN, REPLICATIONOUT,
#rule = 'input.object_hierarchy.project.name != "test"' # Example rule: Only allow projects that are not named "test"
